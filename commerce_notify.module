<?php

/*
 * Custom module for registering email in case of product is un-available.
 * Once product get added to the inventry, users will be notified on cron run.
 */


/*
 * Implements hook_node_view().
 */
function commerce_notify_node_view($node, $view_mode, $langcode){
  
  if($node->type == 'book_display') {
 
	$product_id = $node->field_book_reference[LANGUAGE_NONE][0]['product_id'];
    
	if($view_mode == 'full') {  
		$product_stock = db_query("SELECT * FROM {field_data_commerce_stock} fdcs WHERE fdcs.entity_id = '".$product_id."'");
		$stock = 0;
		foreach ($product_stock as $record) {
		$stock = $record->commerce_stock_value;
		}
		if($stock == 0) {
		  $notify_form = drupal_get_form('commerce_notify_form'/*, $node*/);
		  $node->content['my_additional_field'] = array(
			'#markup' => drupal_render($notify_form),
			'#weight' => 18,
		);
	  }    
	}
  }  
}

/*
 * Implement hook_form().
 */
function commerce_notify_form($node, &$form_state){  
  global $user;
  if($user->uid) {
	$email = $user->mail;
  }
  else{
	$email = "";
  }
  $node = menu_get_object();
  $product_id = $node->field_book_reference[LANGUAGE_NONE][0]['product_id'];  
  $form['markup'] = array(
    '#markup'  => t('Notify me when this book is in stock: '),
  );
  $form['product_id'] = array(
    '#type' => 'hidden', 
    '#value' => $product_id,
  );
  $form['email'] = array(
    '#type' => 'textfield',
    '#title'  => 'Email: ',
    '#required' => TRUE,
    '#default_value'  => $email,
    '#size'=> 30,
    /*
    '#prefix' => '<div class="notify_email">',
    '#sufix'  => '</div>',
    */
    '#element_validate' => array('comment_notify_email_element_validate'),
  );
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Notify me'),
    /*
    '#prefix' => '<div class = "notify_button">',
    '#sufix'  => '</div>',
    */
  );  
  return $form;
}

/*
 * Implement hook_form_submit().
 */
function commerce_notify_form_submit($form, $form_state){  
  $product_id = $form_state['values']['product_id'];
  $email_id = $form_state['values']['email'];  
  $date = date("Y-m-d H:i:s", time());
  
  //Call a function to check submitted email ID with existed.
  $result = _commerce_notify_email_verify($product_id, $email_id);
  
  //If there is no value, submit into DB.
  if($result == 'FALSE') {
    $commerce_notify_inserted = db_insert('commerce_notify')
      ->fields(array(
      'product_id' => $product_id,
      'email' => $email_id,
      'time'  => REQUEST_TIME,
    ))
    ->execute();  
    drupal_set_message("You will be notify on $email_id, when product become available with us.");
  }else{
    drupal_set_message("Your email-id $email_id is already in the list of notification of this product.");
  }
}

/*
 * Function to check email ID inserted by user, whether it exists in notify- 
 * table for the product or not.
 */
function _commerce_notify_email_verify($product_id, $email){
  
  $notify_record = db_select('commerce_notify', 'cn')
    ->fields('cn', array())
    ->condition('product_id', $product_id, '=')
    ->condition('email', $email, '=')
    ->execute();
  
  $no_of_record = $notify_record->rowCount();//Check number of result.
  
  if($no_of_record >= 1) {
    $return_value = "TRUE";
  }else{
    $return_value = "FALSE";
  }
 
  return $return_value;
}

/*
 * Function to check email ID validity.
 */
function comment_notify_email_element_validate($element, &$form_state, $form) {
   if (!valid_email_address($element['#value'])) {
     form_error($element, t('Please enter a valid email address.'));
   }
}

/*
 * Implement hook_cron().
 */
function commerce_notify_cron(){
  
  $email_id_list = db_select('commerce_notify', 'cn')
    ->fields('cn', array())
    ->execute();
  
  foreach ($email_id_list as $notify_record) {
    $product_availability = db_select('field_data_commerce_stock', 'fdcs')
      ->fields('fdcs', array())
      ->condition('entity_id', $notify_record->product_id, '=')
      ->execute();
    foreach($product_availability as $product_record){
      $stock_value = $product_record->commerce_stock_value;
      if($stock_value >=1) {
        
        //Send email
        
        $user_record_deleted = db_delete('commerce_notify')
          ->condition('product_id', $notify_record->product_id)
          ->condition('email', $notify_record->email)
          ->execute();
        //dpm('Product is available, so email is sent & user deleted.');
      }
    }
  }  
}
